/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TermsIndexRouteImport } from './routes/terms/index'
import { Route as PricingIndexRouteImport } from './routes/pricing/index'
import { Route as CustomersIndexRouteImport } from './routes/customers/index'
import { Route as BrandIndexRouteImport } from './routes/brand/index'
import { Route as BlogIndexRouteImport } from './routes/blog/index'
import { Route as AnnouncementIndexRouteImport } from './routes/announcement/index'
import { Route as homeIndexRouteImport } from './routes/(home)/index'
import { Route as CustomersCustomerRouteImport } from './routes/customers/$customer'
import { Route as BlogEntryRouteImport } from './routes/blog/$entry'

const TermsIndexRoute = TermsIndexRouteImport.update({
  id: '/terms/',
  path: '/terms/',
  getParentRoute: () => rootRouteImport,
} as any)
const PricingIndexRoute = PricingIndexRouteImport.update({
  id: '/pricing/',
  path: '/pricing/',
  getParentRoute: () => rootRouteImport,
} as any)
const CustomersIndexRoute = CustomersIndexRouteImport.update({
  id: '/customers/',
  path: '/customers/',
  getParentRoute: () => rootRouteImport,
} as any)
const BrandIndexRoute = BrandIndexRouteImport.update({
  id: '/brand/',
  path: '/brand/',
  getParentRoute: () => rootRouteImport,
} as any)
const BlogIndexRoute = BlogIndexRouteImport.update({
  id: '/blog/',
  path: '/blog/',
  getParentRoute: () => rootRouteImport,
} as any)
const AnnouncementIndexRoute = AnnouncementIndexRouteImport.update({
  id: '/announcement/',
  path: '/announcement/',
  getParentRoute: () => rootRouteImport,
} as any)
const homeIndexRoute = homeIndexRouteImport.update({
  id: '/(home)/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const CustomersCustomerRoute = CustomersCustomerRouteImport.update({
  id: '/customers/$customer',
  path: '/customers/$customer',
  getParentRoute: () => rootRouteImport,
} as any)
const BlogEntryRoute = BlogEntryRouteImport.update({
  id: '/blog/$entry',
  path: '/blog/$entry',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/blog/$entry': typeof BlogEntryRoute
  '/customers/$customer': typeof CustomersCustomerRoute
  '/': typeof homeIndexRoute
  '/announcement': typeof AnnouncementIndexRoute
  '/blog': typeof BlogIndexRoute
  '/brand': typeof BrandIndexRoute
  '/customers': typeof CustomersIndexRoute
  '/pricing': typeof PricingIndexRoute
  '/terms': typeof TermsIndexRoute
}
export interface FileRoutesByTo {
  '/blog/$entry': typeof BlogEntryRoute
  '/customers/$customer': typeof CustomersCustomerRoute
  '/': typeof homeIndexRoute
  '/announcement': typeof AnnouncementIndexRoute
  '/blog': typeof BlogIndexRoute
  '/brand': typeof BrandIndexRoute
  '/customers': typeof CustomersIndexRoute
  '/pricing': typeof PricingIndexRoute
  '/terms': typeof TermsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/blog/$entry': typeof BlogEntryRoute
  '/customers/$customer': typeof CustomersCustomerRoute
  '/(home)/': typeof homeIndexRoute
  '/announcement/': typeof AnnouncementIndexRoute
  '/blog/': typeof BlogIndexRoute
  '/brand/': typeof BrandIndexRoute
  '/customers/': typeof CustomersIndexRoute
  '/pricing/': typeof PricingIndexRoute
  '/terms/': typeof TermsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/blog/$entry'
    | '/customers/$customer'
    | '/'
    | '/announcement'
    | '/blog'
    | '/brand'
    | '/customers'
    | '/pricing'
    | '/terms'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/blog/$entry'
    | '/customers/$customer'
    | '/'
    | '/announcement'
    | '/blog'
    | '/brand'
    | '/customers'
    | '/pricing'
    | '/terms'
  id:
    | '__root__'
    | '/blog/$entry'
    | '/customers/$customer'
    | '/(home)/'
    | '/announcement/'
    | '/blog/'
    | '/brand/'
    | '/customers/'
    | '/pricing/'
    | '/terms/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  BlogEntryRoute: typeof BlogEntryRoute
  CustomersCustomerRoute: typeof CustomersCustomerRoute
  homeIndexRoute: typeof homeIndexRoute
  AnnouncementIndexRoute: typeof AnnouncementIndexRoute
  BlogIndexRoute: typeof BlogIndexRoute
  BrandIndexRoute: typeof BrandIndexRoute
  CustomersIndexRoute: typeof CustomersIndexRoute
  PricingIndexRoute: typeof PricingIndexRoute
  TermsIndexRoute: typeof TermsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/terms/': {
      id: '/terms/'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/pricing/': {
      id: '/pricing/'
      path: '/pricing'
      fullPath: '/pricing'
      preLoaderRoute: typeof PricingIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/customers/': {
      id: '/customers/'
      path: '/customers'
      fullPath: '/customers'
      preLoaderRoute: typeof CustomersIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/brand/': {
      id: '/brand/'
      path: '/brand'
      fullPath: '/brand'
      preLoaderRoute: typeof BrandIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blog/': {
      id: '/blog/'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof BlogIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/announcement/': {
      id: '/announcement/'
      path: '/announcement'
      fullPath: '/announcement'
      preLoaderRoute: typeof AnnouncementIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(home)/': {
      id: '/(home)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof homeIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/customers/$customer': {
      id: '/customers/$customer'
      path: '/customers/$customer'
      fullPath: '/customers/$customer'
      preLoaderRoute: typeof CustomersCustomerRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blog/$entry': {
      id: '/blog/$entry'
      path: '/blog/$entry'
      fullPath: '/blog/$entry'
      preLoaderRoute: typeof BlogEntryRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  BlogEntryRoute: BlogEntryRoute,
  CustomersCustomerRoute: CustomersCustomerRoute,
  homeIndexRoute: homeIndexRoute,
  AnnouncementIndexRoute: AnnouncementIndexRoute,
  BlogIndexRoute: BlogIndexRoute,
  BrandIndexRoute: BrandIndexRoute,
  CustomersIndexRoute: CustomersIndexRoute,
  PricingIndexRoute: PricingIndexRoute,
  TermsIndexRoute: TermsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
